# -*- coding: utf-8 -*-
"""CA682_data_visualisation_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IbO9qBuk-LmeDb0uWRNEnbb4vUaJyQTK
"""

pip install wwo-hist

from google.colab import drive
drive.mount('/content/drive')

from wwo_hist import retrieve_hist_data

import os
os.chdir("/content/drive/MyDrive/Colab Notebooks")

"""**bold text**# New Section"""

FREQUENCY = 1
START_DATE = '01-JAN-2010'
END_DATE = '10-DEC-2020'
API_KEY = '0850768633ee4555939105032201312'
LOCATION_LIST = ['Carlow', 'Cavan', 'Cork', 'Donegal', 'Dublin', 'Galway', 'Kerry','Kildare', 'Kilkenny', 'Laois', 'Leitrim', 'Limerick', 'Longford', 'Louth', 'Meath', 'Monaghan', 'Offaly', 'Roscommon', 'Sligo',
       'Tipperary', 'Westmeath', 'Wexford', 'Wicklow', 'Mayo', 'Clare', 'Waterford']

hist_weather_data = retrieve_hist_data(API_KEY,
                                LOCATION_LIST,
                                START_DATE,
                                END_DATE,
                                FREQUENCY,
                                location_label = False,
                                export_csv = True,
                                store_df = True)

import urllib
import urllib.parse
import urllib.request
import json
import pandas as pd
from datetime import datetime

import os
import glob
import numpy as np
import matplotlib.pyplot as plt

def extract_monthly_data(data):
    num_days = len(data)
    # initialize df_month to store return data
    df_month = pd.DataFrame()
    for i in range(num_days):
        # extract this day
        d = data[i]
        # astronomy data is the same for the whole day
        astr_df = pd.DataFrame(d['astronomy'])
        # hourly data; temperature for each hour of the day
        hourly_df = pd.DataFrame(d['hourly'])
        # this wanted_key will be duplicated and use 'ffill' to fill up the NAs
        wanted_keys = ['date', 'maxtempC', 'mintempC', 'totalSnow_cm', 'sunHour', 'uvIndex']  # The keys you want
        subset_d = dict((k, d[k]) for k in wanted_keys if k in d)
        this_df = pd.DataFrame(subset_d, index=[0])
        df = pd.concat([this_df.reset_index(drop=True), astr_df], axis=1)
        # concat selected astonomy columns with hourly data
        df = pd.concat([df, hourly_df], axis=1)
        df = df.fillna(method='ffill')
        # make date_time columm to proper format
        # fill leading zero for hours to 4 digits (0000-2400 hr)
        df['time'] = df['time'].apply(lambda x: x.zfill(4))
        # keep only first 2 digit (00-24 hr) 
        df['time'] = df['time'].str[:2]
        # convert to pandas datetime
        df['date_time'] = pd.to_datetime(df['date'] + ' ' + df['time'])
        # keep only interested columns
        col_to_keep = ['date_time', 'maxtempC', 'mintempC', 'totalSnow_cm', 'sunHour', 'uvIndex',
                       'moon_illumination', 'moonrise', 'moonset', 'sunrise', 'sunset',
                       'DewPointC', 'FeelsLikeC', 'HeatIndexC', 'WindChillC', 'WindGustKmph',
                       'cloudcover', 'humidity', 'precipMM', 'pressure', 'tempC', 'visibility',
                       'winddirDegree', 'windspeedKmph']
        df = df[col_to_keep]
        df = df.loc[:,~df.columns.duplicated()]
        df_month = pd.concat([df_month, df])
    return (df_month)

def retrieve_this_location(api_key, location, start_date, end_date, frequency, response_cache_path):
    start_time = datetime.now()

    # create list of first day of month for range between start and end dates non-inclusive (open)
    list_mon_begin = pd.date_range(start_date, end_date, freq='MS', closed='right')
    # convert to Series and add start_date at beginning
    list_mon_begin = pd.concat([pd.Series(pd.to_datetime(start_date)), pd.Series(list_mon_begin)], ignore_index=True)

    # create list of month end dates for range between start and end dates non-inclusive (open)
    list_mon_end = pd.date_range(start_date, end_date, freq='M', closed='left')
    # convert to Series and add end_date at end
    list_mon_end = pd.concat([pd.Series(list_mon_end), pd.Series(pd.to_datetime(end_date))], ignore_index=True)

    # count number of months to be retrieved
    total_months = len(list_mon_begin)

    # initialize df_hist to store return data
    df_hist = pd.DataFrame()
    for m in range(total_months):
        start_d = str(list_mon_begin[m])[:10]
        end_d = str(list_mon_end[m])[:10]
        file_path = f'{response_cache_path}/{location}_{start_d}_{end_d}'
        if response_cache_path and os.path.exists(file_path):
            print('Reading cached data for ' + location + ': from ' + start_d + ' to ' + end_d)
            with open(f'{response_cache_path}/{location}_{start_d}_{end_d}', 'r') as f:
                json_data = json.load(f)
        else:
            print('Currently retrieving data for ' + location + ': from ' + start_d + ' to ' + end_d)
            url_page = 'http://api.worldweatheronline.com/premium/v1/past-weather.ashx?key=' + api_key + '&q=' + location + '&format=json&date=' + start_d + '&enddate=' + end_d + '&tp=' + str(
                frequency)
            json_page = urllib.request.urlopen(url_page, timeout=10)
            json_data = json.loads(json_page.read().decode())

        if response_cache_path:
            with open(f'{response_cache_path}/{location}_{start_d}_{end_d}', 'w') as f:
                json.dump(json_data, f)
        data = json_data['data']['weather']
        # call function to extract json object
        df_this_month = extract_monthly_data(data)
        df_this_month['location'] = location
        df_hist = pd.concat([df_hist, df_this_month])

        time_elapsed = datetime.now() - start_time
        print('Time elapsed (hh:mm:ss.ms) {}'.format(time_elapsed))
    return (df_hist)

def retrieve_hist_data(api_key, location_list, start_date, end_date, frequency, location_label=False, export_csv=True,
                       store_df=False, response_cache_path=None):
    result_list = []
    for location in location_list:
        print('\n\nRetrieving weather data for ' + location + '\n\n')
        df_this_city = retrieve_this_location(api_key, location, start_date, end_date, frequency, response_cache_path)

        if (location_label == True):
            # add city name as prefix to the colnames
            df_this_city = df_this_city.add_prefix(location + '_')
            df_this_city.columns.values[0] = 'date_time'

        if (export_csv == True):
            df_this_city.to_csv('./' + location + '.csv', header=True, index=False)
            print('\n\nexport ' + location + ' completed!\n\n')

        if (store_df == True):
            # save result as object in the work space
            result_list.append(df_this_city)

    return (result_list)

import pandas as pd
import seaborn as sns
sns.set()
import matplotlib.pyplot as plt
import numpy as np

path = "/content/drive/MyDrive/Colab Notebooks/weather_ireland_Dec2020back"
all_files = glob.glob(os.path.join(path,"*.csv"))

li = []

for filename in all_files:
    df = pd.read_csv(filename, index_col=None, header=0)
    li.append(df)

frame = pd.concat(li, axis=0, ignore_index=True,sort=True)

frame.to_csv('/content/drive/MyDrive/Colab Notebooks/irishWeather_from2010.csv', index=False)

df_ireland = pd.read_csv(r"/content/drive/MyDrive/Colab Notebooks/irishWeather_from2010.csv")
df_ireland

df_ireland['location'] = df_ireland['location'].str. replace(',Ireland','')

locations = df_ireland['location'].unique()
locations

df_ireland

type(df_ireland['date_time'][0])

df_ireland['date_time'] = pd.to_datetime(df_ireland['date_time'], infer_datetime_format=True)
type(df_ireland['date_time'][0])

df_ireland = df_ireland.set_index('date_time')
df_ireland

df_ireland['month_str'] = df_ireland.index.strftime('%b')
df_ireland['month_num'] = df_ireland.index.month
df_ireland['year'] = df_ireland.index.year
df_ireland['day'] = df_ireland.index.day
df_ireland['hour'] = df_ireland.index.hour

df_ireland

import requests
import pandas as pd
from dateutil import parser, rrule
from datetime import datetime, time, date
import time

df_ireland_tmp = df_ireland[["hour","day","month_num","month_str","year","tempC", "maxtempC","mintempC","precipMM","sunset","sunrise","location"]]

#calculate average temperature by month & Year
groupDf= df_ireland_tmp.groupby(["month_str","year"], as_index=False).mean()
months = groupDf.month_str.unique()
months = ["Jan", "Feb", "Mar", "Apr",
      "May","Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]

groupDf['month_str'] =pd.Categorical(groupDf['month_str'],categories=months, ordered=True)
groupDf

summary = groupDf.pivot("year", "month_str", "tempC")

#Draw heatmap ‘bwr’ to plot in only blue & red
f, ax = plt.subplots(figsize=(15,8))
sns.heatmap(summary, annot=True, linewidths=.5, ax=ax ,cmap="bwr")
plt.title("Temperature in Ireland from 2010 to 2020", fontsize =20)
plt.xlabel("")
plt.ylabel("")
plt.yticks(rotation =45)
plt.show()





import requests
import pandas as pd
from dateutil import parser, rrule
from datetime import datetime, time, date
import time
from dateutil.parser import parse

#!/usr/bin/env python

from fileinput import input
from dateutil.parser import parse
from datetime import datetime
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.dates as mdates
from matplotlib.ticker import MultipleLocator, FormatStrFormatter

# Read in the sunrise and sunset data in CST
# and convert to floating point hours

import  math
def add_time(a, day=None):
     # Getting useful data from start string
     timely, midday = a.split()
     hour, minutes = timely.split(':')
     hour = int(hour)
     minutes = int(minutes)

    # Making the clock into 24 hour format
     if midday == "PM":
        hour += 12
     total_minutes_std_hour = int(hour) * 60
     std_minutes = int(minutes)


	# total of hours combined
     total_minutes = int(total_minutes_std_hour + std_minutes)
     total_hours = total_minutes / 60
     return total_hours

df_ireland_tmp.info()

df_ireland_tmp['sunset1'] = df_ireland_tmp['sunset'].apply(add_time)
df_ireland_tmp['sunrise1'] = df_ireland_tmp['sunrise'].apply(add_time)
# Daylight lengths
lengths = df_ireland_tmp['sunset1'] - df_ireland_tmp['sunrise1']
df_ireland_tmp['daylight_length'] =lengths

#convert date_time to date
df_ireland_tmp['datetime'] = df_ireland_tmp.index.date
df_ireland_tmp

df_ireland_tmp =df_ireland_tmp[['datetime', 'sunset1','sunrise1','daylight_length','month_num','day']]

df_ireland_tmp.duplicated()

df_ireland_tmp =df_ireland_tmp.drop_duplicates()
df_ireland_tmp

df_ireland_tmp= df_ireland_tmp.groupby(["month_num","day","datetime"], as_index=False).mean()
df_ireland_tmp

day = list( ('2020' + '-' + df_ireland_tmp['month_num'].astype(str) + '-' + df_ireland_tmp['day'].astype(str)).apply(parse)    )
sunset = list(df_ireland_tmp['sunset1'])
sunrise = list(df_ireland_tmp['sunrise1'])
lengths = list(df_ireland_tmp['daylight_length'])

df_ireland_tourist =pd.read_csv(r'/content/drive/MyDrive/Colab Notebooks/ireland_tourists.csv')

df_ireland_tourist1= df_ireland_tourist.groupby(["Quarter"], as_index=False).mean()
timePlot =['2020-02-15','2020-05-15','2020-08-15', '2020-11-15']
df_ireland_tourist1['timePlot'] =timePlot
df_ireland_tourist1

day_tourist = list(df_ireland_tourist1['timePlot'].apply(parse))
tourist =list(df_ireland_tourist1['VALUE'])
n =list(df_ireland_tourist1['Quarter'])

import matplotlib.dates as mdates
import matplotlib.axis 
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
# Get the portion of the year that uses IST
cdtStart = day.index(datetime(2020, 3, 29))
cstStart = day.index(datetime(2020, 10, 25))
cdtdays = day[cdtStart:cstStart]
cstrises = sunrise[cdtStart:cstStart]
cdtrises = [ x + 1 for x in cstrises ]
cstsets = sunset[cdtStart:cstStart]
cdtsets = [ x + 1 for x in cstsets ]




# Plot the data
fig, (ax, ax1) =plt.subplots(2,sharex =True, figsize=(15,10))
ax.fill_between(day, sunrise, sunset, facecolor='yellow', alpha=.5)
ax.fill_between(day, 0, sunrise, facecolor='black', alpha=.25)
ax.fill_between(day, sunset, 24, facecolor='black', alpha=.25)
ax.fill_between(cdtdays, cstsets, cdtsets, facecolor='yellow', alpha=.5)
ax.fill_between(cdtdays, cdtrises, cstrises, facecolor='black', alpha=.1)
ax.plot(day, sunrise, color='k')
ax.plot(day, sunset, color='k')
ax.plot(cdtdays, cdtrises, color='k')
ax.plot(cdtdays, cdtsets, color='k')
ax.plot(day, lengths, color='#aa00aa', linestyle='--', lw=2)



ax1.set_ylabel('tourist')  # we already handled the x-label with ax1
#ax1.plot(day_tourist, tourist)
#ax1.tick_params(axis='y')

fig.tight_layout()  # otherwise the right y-label is slightly clipped
ax1.plot(day_tourist,tourist,color = 'black', marker ='o', linestyle ='--')  #add tourists


# Add annotations
ax.text(datetime(2020,8,16), 4, 'Sunrise', fontsize=12, color='black', ha='center', rotation=9)
ax.text(datetime(2020,8,16), 18, 'Sunset', fontsize=12, color='black', ha='center', rotation=-10)
ax.text(datetime(2020,3,16), 13, 'Daylight', fontsize=12, color='#aa00aa', ha='center', rotation=22)

ax1.text(datetime(2020,2,15), 1700, 'Q1', fontsize=12, color='black', ha='center')
ax1.text(datetime(2020,5,15), 2600, 'Q2', fontsize=12, color='black', ha='center')
ax1.text(datetime(2020,8,15), 2900, 'Q3', fontsize=12, color='black', ha='center')
ax1.text(datetime(2020,11,15), 2100, 'Q4', fontsize=12, color='black', ha='center')
#ax1.text(datetime(2020,3,15), 2800, 'Overseas Trips in thousands to Ireland by non-residents', fontsize=15, color='black', ha='center')

# Background grids
ax.grid(linewidth=1, which='major', color='#cccccc', linestyle='-', lw=.5)
ax.grid(linewidth=1, which='minor', color='#cccccc', linestyle=':', lw=.5)

ax1.grid(linewidth=1, which='major', color='#cccccc', linestyle='-', lw=.5)
ax1.grid(linewidth=1, which='minor', color='#cccccc', linestyle=':', lw=.5)

# Horizontal axis
ax.tick_params(axis='both', which='major', labelsize=12)
plt.xlim(datetime(2020, 1, 1), datetime(2020, 12, 31))
m = mdates.MonthLocator(bymonthday=1)
mfmt = mdates.DateFormatter('              %b')
ax.xaxis.set_major_locator(m)
ax.xaxis.set_major_formatter(mfmt)

ax1.tick_params(axis='both', which='major', labelsize=12)
ax1.xaxis.set_major_locator(m)
ax1.xaxis.set_major_formatter(mfmt)

# Vertical axis
#plt.ylim(0, 24)
ax.axis(ymin =0, ymax =24)
ymajor = MultipleLocator(4)
yminor = MultipleLocator(1)
tfmt = FormatStrFormatter('%d:00')
ax.yaxis.set_major_locator(ymajor)
ax.yaxis.set_minor_locator(yminor)
ax.yaxis.set_major_formatter(tfmt)

ax1.axis(ymin =0, ymax =3000)

ax1.set_ylabel('', fontsize =12)
ax.set_ylabel('', fontsize =12)
#ax1.set_title ('Daylength and Overseas Trips to Ireland by Non-Residents by periods', fontsize =25)
ax.set_title ('Daylength and Overseas Trips to Ireland by Non-Residents in thousands', fontsize =25)

# Tighten up the white border and save
fig.set_tight_layout({'pad': 1.5})
plt.savefig('riseset.png', format='png', dpi=150)